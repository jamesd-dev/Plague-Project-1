15-05-20
- Created the most basic framework for the project. Essentially getting the canvas to load
 and display the correct dimensions and installing a game loop.
- There were some problems, originally I had wanted a GameManager object to oversee the 
high-level game operations, but js wouldn't let the important built in functions like 
requestAnimationFrame to play nicely with a class. So that object is now spilled out all
 over a script. I'm hoping it won't get too messy as this project won't expand too much on
 that particular script.
- Finished the start screen. I ended up holding it in an object and creating a new instance everytime the state changes. It sounds
 complicated but I needed to do it to make sure everything was renewed
in a neat way.
- Also had problems witht he window click event. Every screen needs to se click but only one is ever active. So I included an
 event click function in each state to handle the logic and just got the window to run that function in the current gamestate object.
- Created the win and lose state by basically ripping off the start state and adding more text. It looks fine for the MVP even if it's all a bit generic.
- I also created the game state and included the basic (empty) functions it needs to operate as a state even if it has no parent.
- Pretty much just have to create the game now, and connect the logic that leads one screen to the next.
- Built the logic connecting other screens to the game screen, though the game needs to be complete before 
it can lead back.
- Enabled the player to collide with the canvas border.
- Added basic damage taking ability to the player. I want to include a health bar at some point too.

16-05-20
- Reworked the file structure, including an entity class to hold common methods and values for enemies and player.
- Also added an entities list to hold all entities, allowing easy iteration for collisions and running
update and draw methods.
- Spent 20 minutes doing some back of the napkin math to calaculate lasers and make them more efficient.
- Created the laser, it took a while but then it's probably the hardest part of the whole game math-wise.
- I had a sticking point where the laser would be perfectly happy to fire backwards along it's line. But that's fixed now.
- I also enabled it to be used by nything as long as it had a start point and a direction.
 I know nothing else will use it, but.. old habits I guess, I like making it more generic in case I need it later.
- Enabled the laser to produce fans of lasers while the player holds mouse down by creating an interval at mousedown and destroying it
at mouse up. I was worried about the performance time, but it currently seems okay. Also got the laser to fade by tieing their lifetime
to opacity. Though it does make it harder to change colour now as I had to use rgba.
- Spent a very very long time reworking the equation to check laser collisions because it broke down near the vertical axis.
Solution involves the intercection of a circle, but... crumbs, I really want to stop thining about it now that it works.
- Added the ability for enemies to die and made the laser weaker and fainter the further it has to go.

17-05-20
- Added explosion particles and applied the camera shake effect.
- enemies now explode on death.
- made explosions damage the player if it's in range. damage is proportional to how close the explosion is.
- also added a simple health bar for the player
- er... forgot to update the log and did rather a lot.
- debugged the laser that persisted after player death
- made the spawner more efficient
- added simple pauses after each wave
- added a score board

18-05-20
- added a score multiplier that resets after a certain time if you haven't killed an enemy.
- the code is getting messier, but ack, I really can't be arsed to make it cleaner at this point when i'm just adding cosmetic details.
- added multiple waves and fixed some bugs in how new waves are loaded.
